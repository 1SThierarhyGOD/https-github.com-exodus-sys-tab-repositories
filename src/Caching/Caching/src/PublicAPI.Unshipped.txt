#nullable enable
abstract Microsoft.Extensions.Caching.Distributed.HybridCache.GetAsync<T>(string! key, Microsoft.Extensions.Caching.Distributed.HybridCacheEntryOptions? options = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Microsoft.Extensions.Caching.Distributed.HybridCacheEntry<T>?>
abstract Microsoft.Extensions.Caching.Distributed.HybridCache.GetOrCreateAsync<TState, T>(string! key, TState state, System.Func<TState, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<T>>! callback, Microsoft.Extensions.Caching.Distributed.HybridCacheEntryOptions? options = null, System.ReadOnlyMemory<string!> tags = default(System.ReadOnlyMemory<string!>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<T>
abstract Microsoft.Extensions.Caching.Distributed.HybridCache.RemoveKeyAsync(string! key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask
abstract Microsoft.Extensions.Caching.Distributed.HybridCache.SetAsync<T>(string! key, T value, Microsoft.Extensions.Caching.Distributed.HybridCacheEntryOptions? options = null, System.ReadOnlyMemory<string!> tags = default(System.ReadOnlyMemory<string!>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask
Microsoft.Extensions.Caching.Distributed.HybridCache
Microsoft.Extensions.Caching.Distributed.HybridCache.HybridCache() -> void
Microsoft.Extensions.Caching.Distributed.HybridCacheEntry<T>
Microsoft.Extensions.Caching.Distributed.HybridCacheEntry<T>.Expiry.get -> System.DateTime
Microsoft.Extensions.Caching.Distributed.HybridCacheEntry<T>.Expiry.set -> void
Microsoft.Extensions.Caching.Distributed.HybridCacheEntry<T>.HybridCacheEntry() -> void
Microsoft.Extensions.Caching.Distributed.HybridCacheEntry<T>.LocalExpiry.get -> System.DateTime
Microsoft.Extensions.Caching.Distributed.HybridCacheEntry<T>.LocalExpiry.set -> void
Microsoft.Extensions.Caching.Distributed.HybridCacheEntry<T>.Tags.get -> System.ReadOnlyMemory<string!>
Microsoft.Extensions.Caching.Distributed.HybridCacheEntry<T>.Tags.set -> void
Microsoft.Extensions.Caching.Distributed.HybridCacheEntry<T>.Value.get -> T
Microsoft.Extensions.Caching.Distributed.HybridCacheEntry<T>.Value.set -> void
Microsoft.Extensions.Caching.Distributed.HybridCacheEntryFlags
Microsoft.Extensions.Caching.Distributed.HybridCacheEntryFlags.DisableCompression = 4 -> Microsoft.Extensions.Caching.Distributed.HybridCacheEntryFlags
Microsoft.Extensions.Caching.Distributed.HybridCacheEntryFlags.DisableDistributedCache = 2 -> Microsoft.Extensions.Caching.Distributed.HybridCacheEntryFlags
Microsoft.Extensions.Caching.Distributed.HybridCacheEntryFlags.DisableLocalCache = 1 -> Microsoft.Extensions.Caching.Distributed.HybridCacheEntryFlags
Microsoft.Extensions.Caching.Distributed.HybridCacheEntryFlags.None = 0 -> Microsoft.Extensions.Caching.Distributed.HybridCacheEntryFlags
Microsoft.Extensions.Caching.Distributed.HybridCacheEntryOptions
Microsoft.Extensions.Caching.Distributed.HybridCacheEntryOptions.Expiry.get -> System.TimeSpan
Microsoft.Extensions.Caching.Distributed.HybridCacheEntryOptions.Flags.get -> Microsoft.Extensions.Caching.Distributed.HybridCacheEntryFlags
Microsoft.Extensions.Caching.Distributed.HybridCacheEntryOptions.HybridCacheEntryOptions(System.TimeSpan expiry, System.TimeSpan? localCacheExpiry = null, Microsoft.Extensions.Caching.Distributed.HybridCacheEntryFlags flags = Microsoft.Extensions.Caching.Distributed.HybridCacheEntryFlags.None) -> void
Microsoft.Extensions.Caching.Distributed.HybridCacheEntryOptions.LocalCacheExpiry.get -> System.TimeSpan
Microsoft.Extensions.Caching.Distributed.HybridCacheOptions
Microsoft.Extensions.Caching.Distributed.HybridCacheOptions.AllowCompression.get -> bool
Microsoft.Extensions.Caching.Distributed.HybridCacheOptions.AllowCompression.set -> void
Microsoft.Extensions.Caching.Distributed.HybridCacheOptions.DefaultOptions.get -> Microsoft.Extensions.Caching.Distributed.HybridCacheEntryOptions?
Microsoft.Extensions.Caching.Distributed.HybridCacheOptions.DefaultOptions.set -> void
Microsoft.Extensions.Caching.Distributed.HybridCacheOptions.HybridCacheOptions() -> void
Microsoft.Extensions.Caching.Distributed.HybridCacheOptions.MaximumKeyLength.get -> int
Microsoft.Extensions.Caching.Distributed.HybridCacheOptions.MaximumKeyLength.set -> void
Microsoft.Extensions.Caching.Distributed.HybridCacheOptions.MaximumPayloadBytes.get -> long
Microsoft.Extensions.Caching.Distributed.HybridCacheOptions.MaximumPayloadBytes.set -> void
Microsoft.Extensions.Caching.Distributed.HybridCacheOptions.ReportTagMetrics.get -> bool
Microsoft.Extensions.Caching.Distributed.HybridCacheOptions.ReportTagMetrics.set -> void
Microsoft.Extensions.Caching.Distributed.HybridCacheServiceExtensions
Microsoft.Extensions.Caching.Distributed.IBufferDistributedCache
Microsoft.Extensions.Caching.Distributed.IBufferDistributedCache.SetAsync(string! key, System.Buffers.ReadOnlySequence<byte> value, Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions! options, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask
Microsoft.Extensions.Caching.Distributed.IBufferDistributedCache.TryGetAsync(string! key, System.Buffers.IBufferWriter<byte>! destination, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<bool>
Microsoft.Extensions.Caching.Distributed.IDistributedCacheInvalidation
Microsoft.Extensions.Caching.Distributed.IDistributedCacheInvalidation.KeyInvalidated -> System.Func<string!, System.Threading.Tasks.ValueTask>!
Microsoft.Extensions.Caching.Distributed.IDistributedCacheInvalidation.RemoveTagsAsync(System.ReadOnlyMemory<string!> tags, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask
Microsoft.Extensions.Caching.Distributed.IDistributedCacheInvalidation.TagInvalidated -> System.Func<string!, System.Threading.Tasks.ValueTask>!
Microsoft.Extensions.Caching.Distributed.IHybridCacheBuilder
Microsoft.Extensions.Caching.Distributed.IHybridCacheBuilder.Services.get -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
Microsoft.Extensions.Caching.Distributed.IHybridCacheSerializer<T>
Microsoft.Extensions.Caching.Distributed.IHybridCacheSerializer<T>.Deserialize(System.Buffers.ReadOnlySequence<byte> source) -> T
Microsoft.Extensions.Caching.Distributed.IHybridCacheSerializer<T>.Serialize(T value, System.Buffers.IBufferWriter<byte>! target) -> void
Microsoft.Extensions.Caching.Distributed.IHybridCacheSerializerFactory
Microsoft.Extensions.Caching.Distributed.IHybridCacheSerializerFactory.TryCreateSerializer<T>(out Microsoft.Extensions.Caching.Distributed.IHybridCacheSerializer<T>? serializer) -> bool
static Microsoft.Extensions.Caching.Distributed.HybridCacheServiceExtensions.AddHybridCache(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.Extensions.Caching.Distributed.IHybridCacheBuilder!
static Microsoft.Extensions.Caching.Distributed.HybridCacheServiceExtensions.AddHybridCache(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, System.Action<Microsoft.Extensions.Caching.Distributed.HybridCacheOptions!>! setupAction) -> Microsoft.Extensions.Caching.Distributed.IHybridCacheBuilder!
static Microsoft.Extensions.Caching.Distributed.HybridCacheServiceExtensions.WithSerializer<T, TImplementation>(this Microsoft.Extensions.Caching.Distributed.IHybridCacheBuilder! builder) -> Microsoft.Extensions.Caching.Distributed.IHybridCacheBuilder!
static Microsoft.Extensions.Caching.Distributed.HybridCacheServiceExtensions.WithSerializer<T>(this Microsoft.Extensions.Caching.Distributed.IHybridCacheBuilder! builder, Microsoft.Extensions.Caching.Distributed.IHybridCacheSerializer<T>! serializer) -> Microsoft.Extensions.Caching.Distributed.IHybridCacheBuilder!
static Microsoft.Extensions.Caching.Distributed.HybridCacheServiceExtensions.WithSerializerFactory(this Microsoft.Extensions.Caching.Distributed.IHybridCacheBuilder! builder, Microsoft.Extensions.Caching.Distributed.IHybridCacheSerializerFactory! factory) -> Microsoft.Extensions.Caching.Distributed.IHybridCacheBuilder!
static Microsoft.Extensions.Caching.Distributed.HybridCacheServiceExtensions.WithSerializerFactory<TImplementation>(this Microsoft.Extensions.Caching.Distributed.IHybridCacheBuilder! builder) -> Microsoft.Extensions.Caching.Distributed.IHybridCacheBuilder!
virtual Microsoft.Extensions.Caching.Distributed.HybridCache.GetOrCreateAsync<T>(string! key, System.Func<System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<T>>! callback, Microsoft.Extensions.Caching.Distributed.HybridCacheEntryOptions? options = null, System.ReadOnlyMemory<string!> tags = default(System.ReadOnlyMemory<string!>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<T>
virtual Microsoft.Extensions.Caching.Distributed.HybridCache.RemoveKeysAsync(System.ReadOnlyMemory<string!> keys, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask
virtual Microsoft.Extensions.Caching.Distributed.HybridCache.RemoveTagAsync(string! tag, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask
virtual Microsoft.Extensions.Caching.Distributed.HybridCache.RemoveTagsAsync(System.ReadOnlyMemory<string!> tags, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask
